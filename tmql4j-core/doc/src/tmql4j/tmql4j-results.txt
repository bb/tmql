=== Results ===

The results of a querying process are represented similar to the Java Database Connectivity ( JDBC ) 'ResultSet'. The result processor transform the sequence of tuples generated by the interpretation module to an instance of 'IResultSet'. The type of the result set will be different dependent from the property value and the expression type. The user can add its own implementation of a 'IResultSet' to add specific functions or represent the data in the desired way. 

The tmql4j engine will automatically change the implementation of the result set which is compatible to the result types. If the query returns XML content the engine will change the result set class to an implementation of 'XMLResult'. If the interpreter returns CTM content, the result set will be an instance of 'CTMResult'.

The 'IResultSet' interface define a method to check the type of the result set based on an internal enumeration.

--------------------------------------
1:	IResultSet set = query.getResults();
2:	return set.getResultType();
3:	
4:	=> "TMAPI" or "XML" or "CTM" or "TEMPLATE" or "JTMQR"
--------------------------------------

==== Using an IResultSet ====

The 'IResultSet' is designed similar to the JDBC 'ResultSet' and can be used in a similar way. The result set provides a functionality to iterate over the contained results represented by the interface 'IResult'. An instance of 'IResult' represents exactly one tuple of the interpretation result and contains a set of literals and items representing the tuple items. The 'IResult' class can also be used by iteration like the 'IResultSet'.

-------------------------------------
1:	IResultSet<?> set = query.getResults();
2:		for ( IResult result : set ){
3:			for ( Object item : result ){
4:				...
5:			}
6:	}
-------------------------------------

=====================================
In line 1 we extract the result set from the query instance 'query' using the method 'getResults'. The wildcard '?' is used because we don't know the 'IResult' class contained by the result set. Because of the fact that 'IResult' and 'IResultSet' are extending the Java 'Iterable' interface, we simply can iterate over the contained elements using the for-loop as we see in line 2 and 3.
=====================================

As alternative the 'IResultSet' and 'IResult' interface provides a set of 'get' methods to directly access any element of the results.

-------------------------------------
1:	IResultSet#get(int,int)	::	Object
2:	IResultSet#get(int)		::	IResult
3:	IResult#get(int)		::	Object
-------------------------------------

The 'get' method with two integer arguments accesses the cell element at the given row and column. The indexes are zero-based. The method automatically converts the result to the type of the variable it is bind to. The same handling is provided by the 'get' method of 'IResult'.

The 'get' method with only one argument accesses the whole row of the result set at the specified index.

Using alias within the query the user can define special string-indexes similar to JDBC. The string-based indexes can be used by the 'get' Methods of the 'IResult' or 'IResultSet'. 

-------------------------------------
IQuery q = runtime.run(tm, "// tm:subject / tm:name AS \"name\"");
IResultSet rs = q.getResults();
String name = rs.get(0,"name");
// or
IResult r = rs.get(0);
String name_ = r.get("name");
-------------------------------------

The 'get' methods using string-indexes are similar to the integer-based ones.

-------------------------------------
1:	IResultSet#get(int,String)	::	Object
2:	IResultSet#get(String)		::	IResult
3:	IResult#get(String)			::	Object
-------------------------------------

Sometimes the cell value can be 'null' if the navigation result is empty, for example if a topic has no names, the navigation to the name literals are results in a empty cell. The result set provides special methods to check if a cell value is 'null'.

-------------------------------------
1:	IResultSet#isNullValue(int,int)		::	boolean
2:	IResultSet#isNullValue(int,String)	::	boolean
3:	IResult#isNullValue(int)			::	boolean
4:	IResult#isNullValue(String)			::	boolean
-------------------------------------

===== TMAPI-Results =====

The base result type is a TMAPI result set containing plain java objects and TMAPI objects representing the querying results. This result type will be generated by the result processor during the querying process of each expression type except flwr-expression return XML or CTM contents.

===== TopicMap-Results =====

The 'IResultSet' interface provides a method 'toTopicMap' to convert the results of the tmql query to a new topic map instance only containing only the topics and associations of the result set.

*Please note:* If the query returns XML fragments, the method is unsupported by the result set implementation.

===== CTM-Results =====

The 'IResultSet' interface provides a method 'toCtm' to convert the results of the tmql query to a CTM topic map serialization.

*Please note:* If the query returns CTM fragments, the the method connects each fragment to a whole CTM file.

*Please note:* If the query returns XML fragments, the method is unsupported by the result set implementation.

*Please note:* If the query returns JTMQR, the method is unsupported by the result set implementation.

===== XTM-Results =====

The 'IResultSet' interface provides a method 'toXtm' to convert the results of the tmql query to a XTM topic map serialization. In this case every topic and association are convert to its XTM fragment.

*Please note:* If the query returns CTM fragments, the method is unsupported by the result set implementation.

*Please note:* If the query returns XML fragments, the method is unsupported by the result set implementation.

*Please note:* If the query returns JTMQR, the method is unsupported by the result set implementation.

===== JTMQR-Results =====

The 'IResultSet' interface provides a method 'toJTMQR' to convert the results to a JSON representation (JTMQR). topic map serialization. The method supports an optional argument to define the version of JTMQR which should be used. The default version is 1.

*Please note:* If the query returns CTM fragments, the method is unsupported by the result set implementation.

*Please note:* If the query returns XML fragments, the method is unsupported by the result set implementation.

===== XML-Results =====

The 'IResultSet' interface provides a method 'toXml' to convert the results of the tmql query to an XML document. This method is only supported by the flwr result set XMLResult.

===== Update Results =====

Using the update-expression of the Topic Maps Modification Language (TMQL-ML) the result contains a set of information about the construct modified. The update-expression returns the internal ids of the constructs which were created, modified or being context of any modification. For example if a name was added to a topic, the result set will contain the name id, the topic id and in special cases if the type used for the new name does not exist before, the id of this new type will also be contained.

The results of the modification will be aliased by the type of the construct. The following table contains the alias and a description.

[width="100%", cols="1,5"]
|================
|*column alias*| *description*
|topics| The id of the topic a name or occurrences was added to or the id of topic which has to be created to use as type, theme or player.
|associations| The id of the association a role was added to or the id of the new association created.
|names| The id of the name which was modified, created or a variant was added to.
|occurrences| The id of the occurrence which was modified or created.
|roles| The id of the role which was modified or created.
|variants| The id of the variant which was modified or created.
|================

===== Overview =====

[width="100%", cols="1,5"]
|================
|*method*| *description*
|'toCtm'|Converts the results to a new topic map instance and returns its CTM representation.
|'toXtm'|Converts the results to a new topic map instance and returns its XTM representation.
|'toTopicMap'|Converts the results to a new topic map instance.
|'toJTMQR'|Converts the results to its JTMQR representation.
|'toXML'|Only for XML content (FLWR). Returns the XML fragments as XML document.
|================

*Please note:* Each method except the 'toTopicMap' method supports an overloaded variant with a argument of 'OutputStream'. The method writes the result directly to the given stream.