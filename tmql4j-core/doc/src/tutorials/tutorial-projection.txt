=== Tutorial: Using projections ===

===== Use Case =====

In the previous examples we only get simple results as a sequence of singleton tuples. Now we want to extract a tuple sequence containing tripples of a topic item which is a composer, its names and all associations played.

===== Solution =====

A navigation always results in a sequence of singleton tuples containing the result of a navigation step from the source node to the target node like names, occurrences or something else. Sometimes we want to fetch informations starting from the same source node but navigates over different axis. To realise that the current draft contains a tuple projection expression. A projection is used to project a current node to a set of target nodes using navigations too. A projection always creates a tuple sequence containing one tuple item for each projection. 

At first we want to extract the topic items representing an instance of Composer, which we realize with the following query.

-----------------------------
1:	%prefix psi http://psi.ontopedia.net/ // psi:Composer
-----------------------------

The second tuples shall contain all names of the composers instance, which can be realize by the following query.

-----------------------------
1:	%prefix psi http://psi.ontopedia.net/ // psi:Composer / tm:name
-----------------------------

As last tuple item, we need all associations played by the composer instance.

-----------------------------
1:	%prefix psi http://psi.ontopedia.net/ // psi:Composer << players
-----------------------------

To use a projection we have to extract a navigation part which is similar for all expression we need to combine. In our example the navigation part '// psi:Composer' is similar for all three queries and can be used as projection base.

-------------------------------
1:	%prefix psi http://psi.ontopedia.net/ // psi:Composer ( . , . / tm:name , . << players )
-------------------------------

===============================
Projections defined by using round brackets '(' and ')'. The round brackets containing a comma separated list of projections. In this case the first projection represents the current node by using the dot '.'. The second projection projects the current node to its name literals and the last one projects the topic map construct to its played associations. 
===============================

Please note that all projections contained by the projection list uses the same context, which means that the current node will not be inherit by privious projections. The context of the current node will defined by the navigation expression in front of the projection definition. The number of projections is not restricted by the current draft.

In relation to the topic maps data model ( TMDM ) each topic map will be unordered. This can be a problem, because the results of queries can be differs and some applications want to extract informations in a defined sequence. To realize the goal, the projection supports a kind of ordering which can be defined by the user as a part of the query. Each tuple of the projection sequence can be ordered in different ways. The interpretation will be start at the first projection and if two elements of the projection are equal the next projection will be used to order and so far. Please note that the tuples will be ordered only if at least on projection contains an ordering keyword 'ASC' and 'DESC'. Both keywords are similar for other languages too and has not to be explained. In addtion, if a keyword is missing, the default keyword 'ASC' will be add if it is necessary.

-------------------------------------
1:	%prefix psi http://psi.ontopedia.net/ psi:Puccini ( . ASC , . / tm:name )
2:	
3:	=> { 	[ Puccini, "Giacomo Puccini" ],
4:		 	[ Puccini, "Puccini" ],
5:			[ Puccini, "Puccini, Giacomo" ] }
-------------------------------------

=====================================
The projection definition contains the keyword 'ASC' as part of the first projection. Because of the fact that all values of this projection are equal, the order of the second will be used. The default order is 'ASC'.
=====================================

-------------------------------------
1:	%prefix psi http://psi.ontopedia.net/ psi:Puccini ( . ASC , . / tm:name DESC)
2:	
3:	=> { 	[ Puccini, "Puccini, Giacomo" ],
4:		 	[ Puccini, "Puccini" ],
5:			[ Puccini, "Giacomo Puccini" ] }
-------------------------------------

=====================================
The projection definition contains the keyword 'ASC' as part of the first projection. Because of the fact that all values of this projection are equal, the order of the second will be used defined by the keyword 'DESC'.
=====================================

===== Summary =====

The tutorial explain the syntax and usage of projections as one possibility to create are non-singleton result tuple. Projections are always encapsulated by round brackets and contains at least one projection tuple. The current node used in projections is always bound to the same value in all projection tuples contained by this projection. 

In the last examples we learn how to sort the results using the tuple ordering keywords 'ASC' and 'DESC'. If at least one tuple will be ordered by a given keyword, all other will be sort ascending too. 



