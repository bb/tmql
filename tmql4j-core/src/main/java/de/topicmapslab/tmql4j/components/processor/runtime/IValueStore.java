/*
 * Copyright: Copyright 2010 Topic Maps Lab, University of Leipzig. http://www.topicmapslab.de/    
 * License:   Apache License, Version 2.0 http://www.apache.org/licenses/LICENSE-2.0.html
 *  
 * @author Sven Krosse
 * @email krosse@informatik.uni-leipzig.de
 *
 */
package de.topicmapslab.tmql4j.components.processor.runtime;

import java.util.Collection;

import de.topicmapslab.tmql4j.components.parser.IParserTree;
import de.topicmapslab.tmql4j.components.processor.core.QueryMatches;
import de.topicmapslab.tmql4j.components.processor.results.IResultSet;
import de.topicmapslab.tmql4j.grammar.lexical.IToken;
import de.topicmapslab.tmql4j.query.IQuery;

/**
 * Interface definition of a value store.
 * 
 * @author Sven Krosse
 * @email krosse@informatik.uni-leipzig.de
 * 
 */
public interface IValueStore {

	/**
	 * interface definition of allowed keys of a value store
	 * 
	 * @author Sven Krosse
	 * @email krosse@informatik.uni-leipzig.de
	 * 
	 */
	interface IValueKeys {
	}

	/**
	 * Method get access to the result of the screening process (
	 * {@link ScreenerTask} )
	 * 
	 * @return an instance of {@link IQuery}
	 */
	public IQuery getScreenedQuery();

	/**
	 * Method store the result of the screener process into the internal cache (
	 * {@link ScreenerTask} ).
	 * 
	 * @param query
	 *            the screened query
	 */
	public void setScreenedQuery(IQuery query);

	/**
	 * Method get access to the result of the white-spacing process (
	 * {@link WhiteSpacerTask} )
	 * 
	 * @return an instance of {@link IQuery}
	 */
	public IQuery getWhitespacedQuery();

	/**
	 * Method store the result of the white-spacing process into the internal
	 * cache ( {@link WhiteSpacerTask} ).
	 * 
	 * @param query
	 *            the screened query
	 */
	public void setWhitespacedQuery(IQuery query);

	/**
	 * Method get access to the result of the canonizer process (
	 * {@link CanonizerTask} )
	 * 
	 * @return an instance of {@link IQuery}
	 */
	public IQuery getCanonizedQuery();

	/**
	 * Method store the result of the canonizer process into the internal cache
	 * ( {@link CanonizerTask} ).
	 * 
	 * @param query
	 *            the screened query
	 */
	public void setCanonizedQuery(IQuery query);

	/**
	 * Method get access to the chain of language-specific tokens generated by
	 * the lexical scanner ( {@link ILexerTask} )
	 * 
	 * @return an instance of {@link IQuery}
	 */
	public Collection<Class<? extends IToken>> getLanguageSpecificTokens();

	/**
	 * Method store the chain of language-specific tokens generated by the
	 * lexical scanner ( {@link ILexerTask} ).
	 * 
	 * @param tokens
	 *            the chain of language-specific tokens
	 */
	public void setLanguageSpecificTokens(
			Collection<Class<? extends IToken>> tokens);

	/**
	 * Method get access to the chain of string-represented tokens generated by
	 * the lexical scanner ( {@link ILexerTask} )
	 * 
	 * @return an instance of {@link IQuery}
	 */
	public Collection<String> getStringRepresentedTokens();

	/**
	 * Method store the chain of string-represented tokens generated by the
	 * lexical scanner ( {@link ILexerTask} ).
	 * 
	 * @param tokens
	 *            the chain of string-represented tokens
	 */
	public void setStringRepresentedTokens(Collection<String> tokens);

	/**
	 * Method get access to the parsing tree. The parsing tree will be generated
	 * by the parsing process and will be stored during the runtime process.
	 * 
	 * @return an instance of {@link IParserTree}
	 */
	public IParserTree getParserTree();

	/**
	 * Method store the given parsing tree as result of the parsing process.
	 * 
	 * @param tree
	 *            an instance of {@link IParserTree}
	 */
	public void setParserTree(IParserTree tree);

	/**
	 * Method get access to the result of the interpretation process
	 * 
	 * @return an instance of {@link QueryMatches}
	 */
	public QueryMatches getInterpretationResults();

	/**
	 * Method store the result of the interpretation process into the internal
	 * cache
	 * 
	 * @param matches
	 *            an instance of {@link QueryMatches} as interpretation result
	 */
	public void setInterpretationResults(QueryMatches matches);

	/**
	 * Method get access to the result of the whole querying process
	 * 
	 * @return an instance of {@link IResultSet}
	 */
	public IResultSet<?> getResultSet();

	/**
	 * Method store the result of the whole querying process into the internal
	 * cache
	 * 
	 * @param resultSet
	 *            an instance of {@link IResultSet} as querying result
	 */
	public void setResultSet(IResultSet<?> resutlSet);

	/**
	 * Method returns the value stored in the internal cache at the position
	 * identified by the given key.
	 * 
	 * @param key
	 *            the key
	 * @return the object stored by this instance or <code>null</code>
	 */
	public Object get(IValueKeys key);

	/**
	 * Method store the value into the internal cache at the position identified
	 * by the given key.
	 * 
	 * @param key
	 *            the key
	 * @param value
	 *            the object to store
	 */
	public void put(IValueKeys key, Object value);

}
