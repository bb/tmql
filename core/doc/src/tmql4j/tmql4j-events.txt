=== Event model ===

The current version of the tmql4j runtime contains a event model in combination with the new topic maps query modification language extension of the engine. The event manager of the runtime fire events before changing any constructs of the underlying topic map. The event listener will be informed if any event fired and called automatically by the internal event manager. The event manager will be encapsulated by runtime container and can a access by using the function 'getEventManager'.

The event model differs between the different event types. A listener can decide which events it is interested in by filtering the event type. The type of an event a listener is interested in will be defined using java generics. Each implementation of the listener interface 'IEventListener' contains a type parameter representing a inherit class of the event class 'Event'. Any event fired by the internal runtime will be represented as an instance of 'Event' and contains information about the event trigger class and the affected constructs. The number of contained constructs will be different for each event type. Currently the event model supports four specific events.

==== Delete events ====

A 'DeleteEvent' is fired during the interpretation of a delete expression. The internal handler fires an event for each removed construct. The number of events are dependent from the number of removed elements and the removal mode. If a topic with a name item and an occurrence item will be removed cascade, the handler will fire 3 events, one for each of them.

==== Update events ====

A 'UpdateEvent' is fired by during the interpretation of a update expression. The internal handler fires an event for each modification at a construct. In addition to the core event an update event contains the new value of the construct and the modification key representing the changing node.

==== Merge events ====

A 'MergeEvent' is fired by during the interpretation of a insert or merge expression. The internal handler fires an event for each topic merge with a set of other topics. If an insert expression effects in a merging process an event will fired to. The merge event contains a set of all constructs which will be merged. This event will fired before the constructs will be merged.

==== Insert events ====

A 'InsertEvent' is fired by during the interpretation of a insert expression. The internal handler fires an event for each construct added to the underlying topic map. The event contains the new constructed added to the underlying topic map.

==== Register as event listener ====

Any application using the tmql4j engine can be registered as event listener for the runtime container. The application has to contain a class implementing the abstract interface 'IEventListener' and has to implements two methods. 

The method 'isInterested(Event event)' will be called by the event manager before fire the event to this specific event listener. The given argument represents the event which will be fired if the listener is interested in. The listener has to implement an algorithm to decide if it is interested in this specific event. In addition to this method the event manager only calls the listener if the generic type parameter matches with the event type.

-------------------------------------
1:	public boolean isInterested(Event event) {
2:	
3:		String identifier = "http://tmql4j.topicmapslab.de/engine";
4:		
5:		Object obj = event.getConstructOrLocator();
6:		if ( obj instanceof Topic ){
7:			Topic topic = Topic.class.cast(obj);
8:			return topic.getSubjectIdentifiers().contains(topic.getTopicMap().createLocator(identifier));
9:		}
10:		else if ( obj instanceof Locator ){
11:			return Locator.class.cast(obj).getReference().equalsIgnoreCase(identifier);
12:		}		
13:		return false;
14:	}
-------------------------------------

=====================================
The code snippets contains an example implementation of an event listener only interested in a topic with a specific identifier IRI specified in line 3. In line 5 the affected construct will be read from the event instance. Because of the fact, that the affected construct can be a locator or a TMAPI construct we has to check if the construct is a topic instance as we see in line 6. Between line 7 and 8 the method checks if the topic has a subject identifier it is interested in. If the construct is a locator it directly checks if the IRI of both locators are equal as we see in line 11. Otherwise the method returns 'false' every time.
=====================================

The other method the listener has to implement is the method 'event(Event event)'. The method will be called by the event manager if the listener is interested in the current event instance.

The last step is to register the event listener at the event manager and remove it later once.

-------------------------------------
1:	runtime.getEventManager().addEventListener(this);
2:
3:	runtime.getEventManager().removeEventListener(this);
-------------------------------------
